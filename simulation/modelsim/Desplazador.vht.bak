-- Copyright (C) 1991-2013 Altera Corporation
-- Your use of Altera Corporation's design tools, logic functions 
-- and other software and tools, and its AMPP partner logic 
-- functions, and any output files from any of the foregoing 
-- (including device programming or simulation files), and any 
-- associated documentation or information are expressly subject 
-- to the terms and conditions of the Altera Program License 
-- Subscription Agreement, Altera MegaCore Function License 
-- Agreement, or other applicable license agreement, including, 
-- without limitation, that your use is for the sole purpose of 
-- programming logic devices manufactured by Altera and sold by 
-- Altera or its authorized distributors.  Please refer to the 
-- applicable agreement for further details.

-- ***************************************************************************
-- This file contains a Vhdl test bench template that is freely editable to   
-- suit user's needs .Comments are provided in each section to help the user  
-- fill out necessary details.                                                
-- ***************************************************************************
-- Generated on "03/24/2021 09:15:35"
                                                            
-- Vhdl Test Bench template for design  :  Desplazador
-- 
-- Simulation tool : ModelSim-Altera (VHDL)
-- 

LIBRARY ieee;                                               
USE ieee.std_logic_1164.all;   
USE ieee.numeric_std.all;                             

ENTITY Desplazador_vhd_tst IS
END Desplazador_vhd_tst;
ARCHITECTURE Desplazador_arch OF Desplazador_vhd_tst IS
-- constants                                                 
-- signals                                                   
SIGNAL alu_op : STD_LOGIC_VECTOR(3 DOWNTO 0);
SIGNAL entrada : STD_LOGIC_VECTOR(3 DOWNTO 0);
SIGNAL salida_sll : STD_LOGIC_VECTOR(3 DOWNTO 0);
SIGNAL salida_sra : STD_LOGIC_VECTOR(3 DOWNTO 0);
SIGNAL salida_srl : STD_LOGIC_VECTOR(3 DOWNTO 0);
SIGNAL shamt : STD_LOGIC_VECTOR(4 DOWNTO 0);
COMPONENT Desplazador
	PORT (
	alu_op : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
	entrada : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
	salida_sll : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
	salida_sra : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
	salida_srl : OUT STD_LOGIC_VECTOR(3 DOWNTO 0);
	shamt : IN STD_LOGIC_VECTOR(4 DOWNTO 0)
	);
END COMPONENT;
BEGIN
	i1 : Desplazador
	PORT MAP (
-- list connections between master ports and signals
	alu_op => alu_op,
	entrada => entrada,
	salida_sll => salida_sll,
	salida_sra => salida_sra,
	salida_srl => salida_srl,
	shamt => shamt
	);
init : PROCESS                                               
-- variable declarations                                     
BEGIN                                                        
        -- code that executes only once                      
WAIT;                                                       
END PROCESS init;                                           
always : PROCESS                                              
-- optional sensitivity list                                  
-- (        )                                                 
-- variable declarations                                      
BEGIN                                                         
        -- code executes for every event on sensitivity list  
		  for i in 0 to 15 loop 
			entrada <= std_logic_vector(to_unsigned(i,4));
			alu_op <= "0001";
			
			--assert salida_sll = STD_LOGIC_VECTOR(shift_left(unsigned(entrada), num_desplaz))
			--report "Fallo con el sll"
			--severity failure;
			wait for 100 ns;
			
			alu_op <= "0101";
			--assert salida_sra = STD_LOGIC_VECTOR(shift_right(unsigned(entrada), num_desplaz))
			--report "Fallo con el sra"
			--severity failure;
			wait for 100ns;
			
			alu_op <= "1101"
			--assert salida_srl = STD_LOGIC_VECTOR(shift_right(signed(entrada), num_desplaz))
			--report "Fallo con el srl"
			--severity failure;
			wait for 100ns;
			
		  end loop;
WAIT;                                                        
END PROCESS always;                                          
END Desplazador_arch;
